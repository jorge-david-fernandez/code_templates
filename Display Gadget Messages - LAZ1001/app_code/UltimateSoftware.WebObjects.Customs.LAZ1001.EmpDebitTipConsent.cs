//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UltimateSoftware.WebObjects.Customs.LAZ1001 {
    using System;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UltimateSoftware.ObjectModel.Common;
    using UltimateSoftware.ObjectModel.Facade;
    using UltimateSoftware.ObjectModel.Base;
    using UltimateSoftware.Customs.LAZ1001.Facade;
    using UltimateSoftware.WebControls;
    using UltimateSoftware.Security;
    
    
    // **** START DATAITEM GEN INFO - DO NOT DELETE ****
    // !>>>! _ASSEMBLY=UltimateSoftware.Customs.LAZ1001.SR00245269, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
    // !>>>! _TYPE=UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent
    // !>>>! _NAMESPACE=UltimateSoftware.WebObjects.Customs.LAZ1001
    // !>>>! _HYBRID=False
    // !>>>! _FACADE_NAME=EmpDebitTipConsentFacade
    // !>>>! _FACADE_DLL=UltimateSoftware.Customs.LAZ1001.SR00245269.dll
    // !>>>! _FACADE_PATH=
    // !>>>! _FACADE_NAMESPACE=UltimateSoftware.Customs.LAZ1001.Facade
    // !>>>! _INHERIT_FROM=
    // **** END DATAITEM GEN INFO - DO NOT DELETE ****
    [System.ComponentModel.DataObject()]
    [ComVisible(true)]
    public partial class EmpDebitTipConsentDataItem : UltimateSoftware.ObjectModel.Common.DataItem {
        
        protected UltimateSoftware.ObjectModel.Base.ObjectList dataItemList = null;
        
        protected string _ObjectID = null;
        
        protected ProcessManager processManager = null;
        
        protected bool bDataLoad = false;
        
        protected bool bPopulatedFromSetup = false;
        
        private string _PKaCOID;
        
        private string _PKaEEID;
        
        private string _EEID;
        
        private string _CoID;
        
        private string _UDField21;
        
        private string _UDField22;
        
        private string _UDField05;
        
        private string _UDField06;
        
        private string _DateTimeCreated;
        
        private string _DateTimeChanged;
        
        private string _SelectedInGrid;
        
        public EmpDebitTipConsentDataItem(UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent aData) : 
                base(aData) {
        }
        
        public EmpDebitTipConsentDataItem() {
            this.bDataLoad = true;
        }
        
        public UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent Data {
            get {
                return ((UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent)(this.data));
            }
        }
        
        public UltimateSoftware.ObjectModel.Base.ObjectList DataItemList {
            get {
                return this.dataItemList;
            }
            set {
                this.dataItemList = value;
            }
        }
        
        public override string ObjectID {
            get {
                if (this.Data != null) _ObjectID = this.Data.ObjectID;
                return this._ObjectID;
            }
            set {
                this._ObjectID = value;
            }
        }
        
        public override bool Deleted {
            get {
                return this.Data.ObjectState.Equals(ObjectListItemState.Deleted);
            }
            set {
                if (value && !Data.ObjectState.Equals(ObjectListItemState.Deleted)) {
                    this.Data.Delete();
                }
                else {
                    if (!value && Data.ObjectState.Equals(ObjectListItemState.Deleted)) {
                        this.Data.Undelete();
                    }
                }
            }
        }
        
        public UltimateSoftware.WebControls.ProcessManager ProcessManager {
            get {
                return this.processManager;
            }
            set {
                this.processManager = value;
            }
        }
        
        public bool PopulatedFromSetup {
            get {
                return this.bPopulatedFromSetup;
            }
            set {
                this.bPopulatedFromSetup = value;
            }
        }
        
        public string PKaCOID {
            get {
                if (this.bDataLoad) {
                    return _PKaCOID;
                }
                else {
                    if (this.Data.PrimaryKey.ContainsKey("aCOID")) {
                        if ((this.Data.PrimaryKey["aCOID"] == null)) {
                            return String.Empty;
                        }
                        else {
                            return this.Data.PrimaryKey["aCOID"].ToString();
                        }
                    }
                    else {
                        return String.Empty;
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _PKaCOID = value;
                }
                else {
                    if (String.IsNullOrEmpty(value)) {
                        this.Data.PrimaryKey["aCOID"] = null;
                    }
                    else {
                        this.Data.PrimaryKey["aCOID"] = value;
                    }
                }
            }
        }
        
        public string PKaEEID {
            get {
                if (this.bDataLoad) {
                    return _PKaEEID;
                }
                else {
                    if (this.Data.PrimaryKey.ContainsKey("aEEID")) {
                        if ((this.Data.PrimaryKey["aEEID"] == null)) {
                            return String.Empty;
                        }
                        else {
                            return this.Data.PrimaryKey["aEEID"].ToString();
                        }
                    }
                    else {
                        return String.Empty;
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _PKaEEID = value;
                }
                else {
                    if (String.IsNullOrEmpty(value)) {
                        this.Data.PrimaryKey["aEEID"] = null;
                    }
                    else {
                        this.Data.PrimaryKey["aEEID"] = value;
                    }
                }
            }
        }
        
        public string EEID {
            get {
                if (this.bDataLoad) {
                    return _EEID;
                }
                else {
                    if ((this.Data.DataElementExistAt("EEID") && this.Data.DataElements["EEID"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.EEID.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _EEID = value;
                }
                else {
                    if (this.Data.DataElementExistAt("EEID")) {
                        if (this.Data.DataElements["EEID"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("EEID");
                            }
                            else {
                                this.Data.EEID = value;
                            }
                        }
                    }
                    else {
                        this.Data.EEID = value;
                    }
                }
            }
        }
        
        public string CoID {
            get {
                if (this.bDataLoad) {
                    return _CoID;
                }
                else {
                    if ((this.Data.DataElementExistAt("CoID") && this.Data.DataElements["CoID"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.CoID.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _CoID = value;
                }
                else {
                    if (this.Data.DataElementExistAt("CoID")) {
                        if (this.Data.DataElements["CoID"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("CoID");
                            }
                            else {
                                this.Data.CoID = value;
                            }
                        }
                    }
                    else {
                        this.Data.CoID = value;
                    }
                }
            }
        }
        
        public string UDField21 {
            get {
                if (this.bDataLoad) {
                    return _UDField21;
                }
                else {
                    if ((this.Data.DataElementExistAt("UDField21") && this.Data.DataElements["UDField21"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.UDField21.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _UDField21 = value;
                }
                else {
                    if (this.Data.DataElementExistAt("UDField21")) {
                        if (this.Data.DataElements["UDField21"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("UDField21");
                            }
                            else {
                                this.Data.UDField21 = value;
                            }
                        }
                    }
                    else {
                        this.Data.UDField21 = value;
                    }
                }
            }
        }
        
        public string UDField22 {
            get {
                if (this.bDataLoad) {
                    return _UDField22;
                }
                else {
                    if ((this.Data.DataElementExistAt("UDField22") && this.Data.DataElements["UDField22"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.UDField22.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _UDField22 = value;
                }
                else {
                    if (this.Data.DataElementExistAt("UDField22")) {
                        if (this.Data.DataElements["UDField22"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("UDField22");
                            }
                            else {
                                this.Data.UDField22 = value;
                            }
                        }
                    }
                    else {
                        this.Data.UDField22 = value;
                    }
                }
            }
        }
        
        public string UDField05 {
            get {
                if (this.bDataLoad) {
                    return _UDField05;
                }
                else {
                    if ((this.Data.DataElementExistAt("UDField05") && this.Data.DataElements["UDField05"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.UDField05.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _UDField05 = value;
                }
                else {
                    if (this.Data.DataElementExistAt("UDField05")) {
                        if (this.Data.DataElements["UDField05"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("UDField05");
                            }
                            else {
                                this.Data.UDField05 = value;
                            }
                        }
                    }
                    else {
                        this.Data.UDField05 = value;
                    }
                }
            }
        }
        
        public string UDField06 {
            get {
                if (this.bDataLoad) {
                    return _UDField06;
                }
                else {
                    if ((this.Data.DataElementExistAt("UDField06") && this.Data.DataElements["UDField06"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.UDField06.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _UDField06 = value;
                }
                else {
                    if (this.Data.DataElementExistAt("UDField06")) {
                        if (this.Data.DataElements["UDField06"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("UDField06");
                            }
                            else {
                                this.Data.UDField06 = Convert.ToDateTime(value);
                            }
                        }
                    }
                    else {
                        this.Data.UDField06 = Convert.ToDateTime(value);
                    }
                }
            }
        }
        
        public string DateTimeCreated {
            get {
                if (this.bDataLoad) {
                    return _DateTimeCreated;
                }
                else {
                    if ((this.Data.DataElementExistAt("DateTimeCreated") && this.Data.DataElements["DateTimeCreated"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.DateTimeCreated.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _DateTimeCreated = value;
                }
                else {
                    if (this.Data.DataElementExistAt("DateTimeCreated")) {
                        if (this.Data.DataElements["DateTimeCreated"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("DateTimeCreated");
                            }
                            else {
                                this.Data.DateTimeCreated = Convert.ToDateTime(value);
                            }
                        }
                    }
                    else {
                        this.Data.DateTimeCreated = Convert.ToDateTime(value);
                    }
                }
            }
        }
        
        public string DateTimeChanged {
            get {
                if (this.bDataLoad) {
                    return _DateTimeChanged;
                }
                else {
                    if ((this.Data.DataElementExistAt("DateTimeChanged") && this.Data.DataElements["DateTimeChanged"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.DateTimeChanged.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _DateTimeChanged = value;
                }
                else {
                    if (this.Data.DataElementExistAt("DateTimeChanged")) {
                        if (this.Data.DataElements["DateTimeChanged"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("DateTimeChanged");
                            }
                            else {
                                this.Data.DateTimeChanged = Convert.ToDateTime(value);
                            }
                        }
                    }
                    else {
                        this.Data.DateTimeChanged = Convert.ToDateTime(value);
                    }
                }
            }
        }
        
        public string SelectedInGrid {
            get {
                if (this.bDataLoad) {
                    return _SelectedInGrid;
                }
                else {
                    if ((this.Data.DataElementExistAt("SelectedInGrid") && this.Data.DataElements["SelectedInGrid"].IsNull)) {
                        return String.Empty;
                    }
                    else {
                        return this.Data.SelectedInGrid.ToString();
                    }
                }
            }
            set {
                if (this.bDataLoad) {
                    _SelectedInGrid = value;
                }
                else {
                    if (this.Data.DataElementExistAt("SelectedInGrid")) {
                        if (this.Data.DataElements["SelectedInGrid"].WillCauseChange(value)) {
                            if (String.IsNullOrEmpty(value)) {
                                this.Data.Clear("SelectedInGrid");
                            }
                            else {
                                this.Data.SelectedInGrid = Convert.ToBoolean(value);
                            }
                        }
                    }
                    else {
                        this.Data.SelectedInGrid = Convert.ToBoolean(value);
                    }
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
        public UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem SelectData() {
            return this;
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
        public List<DataItem> SelectAllData() {
            if (dataItemList == null) {
                return null;
            }
            List<DataItem> dl = new List<DataItem>();
            foreach (object o in dataItemList) dl.Add(new EmpDebitTipConsentDataItem(o as UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent));
            return dl;
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
        public List<DataItem> SelectAllData(string sortExpression, int startRow, int maxRows) {
            if (dataItemList == null) {
                return null;
            }
            List<DataItem> dl = new List<DataItem>();
            dataItemList.DefaultObjectView.Active = false;
            dataItemList.DefaultObjectView.Sort = sortExpression;
            dataItemList.DefaultObjectView.Active = true;
            int ii = 0;
            for (ii = startRow; (ii < startRow + maxRows && ii < dataItemList.DefaultObjectView.Objects.Count); ii = (ii + 1)) {
                dl.Add(new EmpDebitTipConsentDataItem(dataItemList.DefaultObjectView.Objects[ii] as UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent));
            }
            return dl;
        }
        
        public int ListCount() {
            return dataItemList.Count;
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
        public UltimateSoftware.ObjectModel.Base.ObjectList UpdateData(UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem aData) {
            ProcessManager.CopyObject(aData, this);
            return dataItemList;
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public UltimateSoftware.ObjectModel.Base.ObjectList InsertData(UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem aData) {
            ProcessManager.CopyObject(aData, this);
            return dataItemList;
        }
        
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem DeleteData(UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem aData) {
            this.Deleted = true;
            return this;
        }
        
        public static UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem GetObjectFromList(string theID, UltimateSoftware.ObjectModel.Base.ObjectList theList) {
            UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent item;
            if (theID != null) {
                item = (UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent)theList.FindByObjectID(theID);
            }
            else {
                item = (UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent)theList[0];
            }
            return new EmpDebitTipConsentDataItem(item);
        }
        
        public static UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem NewEmpDebitTipConsent(BusObjectParams PrimaryKeys, string theID, UserContext userContext, ref UltimateSoftware.ObjectModel.Base.ObjectList theList, string PopulateParameter) {
            EmpDebitTipConsentFacade facade = new EmpDebitTipConsentFacade(userContext);
            UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent item;
            if (theList == null) {
                theList = facade.GetEmpDebitTipConsent();
                item = (UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent)theList.NewObject();
            }
            else {
                item = (UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsent)theList.NewObject();
            }
            theID = item.ObjectID;
            foreach (BusObjectParam b in PrimaryKeys)  item.PrimaryKey.Add(b.Key, b.Value);
            theList.Add(item);
            EmpDebitTipConsentDataItem di = GetObjectFromList(theID,theList);
            return di;
        }
        
        public static UltimateSoftware.WebObjects.Customs.LAZ1001.EmpDebitTipConsentDataItem GetEmpDebitTipConsentByKey(string aCOID, string aEEID, string theID, UserContext userContext, ref ObjectList theList) {
            EmpDebitTipConsentFacade facade = new EmpDebitTipConsentFacade(userContext);
            theList = facade.GetEmpDebitTipConsentByKey(aCOID,aEEID);
            if (theList.Count != 0) {
                return GetObjectFromList(theID, theList);
            }
            else {
                return null;
            }
        }
        
        public void SetEmpDebitTipConsent(UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsentList aEmpDebitTipConsentList) {
            EmpDebitTipConsentFacade facade = new EmpDebitTipConsentFacade();
            facade.SetEmpDebitTipConsent(aEmpDebitTipConsentList);
        }
        
        public void PostProcessEmpDebitTipConsent(UltimateSoftware.Customs.LAZ1001.Objects.EmpDebitTipConsentList aEmpDebitTipConsentList) {
            EmpDebitTipConsentFacade facade = new EmpDebitTipConsentFacade();
            facade.PostProcessEmpDebitTipConsent(aEmpDebitTipConsentList);
        }
    }
}
